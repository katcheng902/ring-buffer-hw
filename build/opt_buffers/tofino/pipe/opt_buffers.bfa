version:
  version: 1.0.1
  run_id: "a5814967fd135097"
  target: Tofino
phv ingress:
  hdr.ethernet.dst_addr.0-31: TW0
  hdr.ethernet.dst_addr.32-47: TH1
  hdr.ethernet.src_addr.0-31: W2
  hdr.ethernet.src_addr.32-47: H0
  hdr.ethernet.ether_type: TH0
  hdr.ipv4.dst_addr: W3
  ig_intr_md_for_dprsr.drop_ctl: B0(0..2)
  Enqueue_left_tmp: W0
  Enqueue_first_tmp: W4(0)
  Enqueue_tail_tmp: W1
  Dequeue_left_tmp: W0
  Dequeue_size_tmp: W4
  Dequeue_head_tmp: W1
  hdr.ethernet.$valid: B1(0)
  context_json:
    B0:
    - { name : ig_intr_md_for_dprsr.drop_ctl, live_start : 1, live_end : deparser, mutually_exclusive_with: [  ] }
    B1:
    - { name : hdr.ethernet.$valid, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    H0:
    - { name : hdr.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W0:
    - { name : Enqueue_left_tmp, live_start : 1, live_end : 1, mutually_exclusive_with: [ Dequeue_left_tmp ] }
    - { name : Dequeue_left_tmp, live_start : 1, live_end : 1, mutually_exclusive_with: [ Enqueue_left_tmp ] }
    W1:
    - { name : Enqueue_tail_tmp, live_start : 2, live_end : 2, mutually_exclusive_with: [ Dequeue_head_tmp ] }
    - { name : Dequeue_head_tmp, live_start : 2, live_end : 2, mutually_exclusive_with: [ Enqueue_tail_tmp ] }
    W2:
    - { name : hdr.ethernet.src_addr, live_start : parser, live_end : deparser, mutually_exclusive_with: [  ] }
    W3:
    - { name : hdr.ipv4.dst_addr, live_start : parser, live_end : 2, mutually_exclusive_with: [  ] }
    W4:
    - { name : Enqueue_first_tmp, live_start : 1, live_end : 1, mutually_exclusive_with: [ Dequeue_size_tmp ] }
    - { name : Dequeue_size_tmp, live_start : 1, live_end : 1, mutually_exclusive_with: [ Enqueue_first_tmp ] }
phv egress:
  context_json:
parser ingress:
  start: $entry_point
  init_zero: [ B0, W0, W4, W1, B1 ]
  hdr_len_adj: 16
  states:
    $entry_point:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: start
    start:
      match: [ byte1 ]
      0b1*******:
        shift: 8
        buf_req: 8
        next: end
      0b0*******:
        shift: 8
        buf_req: 8
        next: TofinoIngressParser_parse_port_metadata
    TofinoIngressParser_parse_port_metadata:
      *:
        8..9: TH1  # ingress::hdr.ethernet.dst_addr[47:32].32-47
        10..13: TW0  # ingress::hdr.ethernet.dst_addr[31:0].0-31
        14..15: H0  # ingress::hdr.ethernet.src_addr[47:32].32-47
        16..19: W2  # ingress::hdr.ethernet.src_addr[31:0].0-31
        20..21: TH0  # ingress::hdr.ethernet.ether_type
        B1: 1  # value 1 -> B1 bit[0]: ingress::hdr.ethernet.$valid
        shift: 32
        buf_req: 32
        next: TofinoIngressParser_parse_port_metadata.$oob_stall_0
    TofinoIngressParser_parse_port_metadata.$oob_stall_0:
      *:
        load: { half : 6..7, byte0 : 8, byte1 : 9 }
        buf_req: 10
        next: TofinoIngressParser_parse_port_metadata.$split_0
    TofinoIngressParser_parse_port_metadata.$split_0:
      match: [ half, byte0, byte1 ]
      0x01020304:
        6..9: W3  # ingress::hdr.ipv4.dst_addr
        shift: 10
        buf_req: 10
        next: end
      0x01020305:
        6..9: W3  # ingress::hdr.ipv4.dst_addr
        shift: 10
        buf_req: 10
        next: end
      0x********:
        6..9: W3  # ingress::hdr.ipv4.dst_addr
        shift: 10
        buf_req: 10
        next: end
deparser ingress:
  dictionary:
    TH1: B1(0)  # ingress::hdr.ethernet.dst_addr.32-47 if ingress::hdr.ethernet.$valid
    TW0: B1(0)  # ingress::hdr.ethernet.dst_addr.0-31 if ingress::hdr.ethernet.$valid
    H0: B1(0)  # ingress::hdr.ethernet.src_addr.32-47 if ingress::hdr.ethernet.$valid
    W2: B1(0)  # ingress::hdr.ethernet.src_addr.0-31 if ingress::hdr.ethernet.$valid
    TH0: B1(0)  # ingress::hdr.ethernet.ether_type if ingress::hdr.ethernet.$valid
  drop_ctl: B0(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.drop_ctl
parser egress:
  start: $entry_point.start
  hdr_len_adj: 0
  meta_opt: 0
  states:
    $entry_point.start:
      *:
        buf_req: 0
        next: end
deparser egress:
  dictionary: {}
stage 0 ingress:
  phase0_match SwitchIngressParser.$PORT_METADATA:
    p4:
      name: SwitchIngressParser.$PORT_METADATA
      size: 288
      preferred_match_type: exact
      match_type: exact
    size: 288
    p4_param_order:
      ig_intr_md.ingress_port: { type: exact, size: 9 }
    format: {ig_intr_md: 0..63}
    constant_value: 0
    actions:
      set_port_metadata:
      - handle: 0x20000000
      - p4_param_order: { ig_intr_md: 64 } 
  exact_match dmac_0 0:
    p4: { name: SwitchIngress.dmac, size: 256 }
    p4_param_order: 
      hdr.ethernet.src_addr: { type: exact, size: 48, full_size: 48 }
    row: 7
    bus: 0
    column: [ 2, 3, 4, 5 ]
    stash: 
      row: [ 7 ]
      col: [ 2 ]
      unit: [ 0 ]
    ways:
      - [0, 0, 0x0, [7, 2]]
      - [0, 1, 0x0, [7, 3]]
      - [0, 2, 0x0, [7, 4]]
      - [0, 3, 0x0, [7, 5]]
    input_xbar:
      exact group 0: { 0: hdr.ethernet.src_addr.0-31, 32: hdr.ethernet.src_addr.32-47 }
      hash 0:
        0..7: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(0..7)
        8..9: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(8..9)
        11..18: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(0..7)
        19: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(8)
        10: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(9)
        22..29: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(0..7)
        20..21: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(8..9)
        33..39: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(0..6)
        30: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(7)
        31..32: random(hdr.ethernet.src_addr.0-31, hdr.ethernet.src_addr.32-47(10..15)) ^ hdr.ethernet.src_addr.32-47(8..9)
      hash group 0:
        table: [0]
        seed: 0x8fabaaab2d
    format: { action(0): 0..0, version(0): 112..115, match(0): [66..71, 32..63 ] }
    match: [ hdr.ethernet.src_addr.32-47(10..15), hdr.ethernet.src_addr.0-31(0..7), hdr.ethernet.src_addr.0-31(8..15), hdr.ethernet.src_addr.0-31(16..23), hdr.ethernet.src_addr.0-31(24..31) ]
    match_group_map: [ [ 0 ] ]
    hit: [  Enqueue_left_table,  Dequeue_left_table ]
    miss:  END
    context_json:
      static_entries:
      - priority: 0
        match_key_fields_values:
        - field_name: hdr.ethernet.src_addr
          value: "0x33445566"
        action_handle: 0x20000001
        is_default_entry: false
        action_parameters_values: []
      - priority: 1
        match_key_fields_values:
        - field_name: hdr.ethernet.src_addr
          value: "0x11223344"
        action_handle: 0x20000007
        is_default_entry: false
        action_parameters_values: []
    instruction: dmac_0(action, $DEFAULT)
    actions:
      SwitchIngress.drop(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000001
      - next_table: 0
      - set ig_intr_md_for_dprsr.drop_ctl, 1
      NoAction(1, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000007
      - next_table: 1
    default_action: NoAction
  ternary_match Enqueue_left_table 2:
    p4: { name: SwitchIngress.Enqueue.left_table, size: 512 }
    hit: [  Enqueue_first_table ]
    miss:  Enqueue_first_table
    indirect: Enqueue_left_table$tind
  stateful Enqueue_left_table$salu.lefts:
    p4: { name: lefts, size: 3 }
    row: 7
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 7
    format: { lo: 32 }
    actions:
      Enqueue_read_left_reg_action:
      - output mem_lo
      Dequeue_read_left_reg_action:
      - output mem_lo
  ternary_indirect Enqueue_left_table$tind:
    row: 1
    bus: 0
    format: { action: 0..0, meter_addr: 1..10 }
    action_bus: { 96..99 : Enqueue_left_table$salu.lefts(0..31) }
    stateful: Enqueue_left_table$salu.lefts(meter_addr, $DEFAULT, $DEFAULT)
    instruction: Enqueue_left_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Enqueue.read_left(0, 4):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000002
      - next_table: 0
      - set Enqueue_left_tmp, Enqueue_left_table$salu.lefts
      - Enqueue_left_table$salu.lefts(Enqueue_read_left_reg_action, 0)
    default_action: SwitchIngress.Enqueue.read_left
  ternary_match Enqueue_first_table 3:
    p4: { name: SwitchIngress.Enqueue.first_table, size: 512 }
    hit: [  Enqueue_inc_size_table ]
    miss:  Enqueue_inc_size_table
    indirect: Enqueue_first_table$tind
  stateful Enqueue_first_table$salu.firsts:
    p4: { name: firsts, size: 3 }
    row: 11
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 11
    format: { lo: 1 }
    actions:
      Enqueue_set_first_reg_action:
      - set_bit
      - output alu_lo
      clr_bit_alu$0:
      - clr_bit
  ternary_indirect Enqueue_first_table$tind:
    row: 0
    bus: 1
    format: { action: 0..0, meter_addr: 1..10 }
    action_bus: { 104..107 : Enqueue_first_table$salu.firsts(0..31) }
    stateful: Enqueue_first_table$salu.firsts(meter_addr, $DEFAULT, $DEFAULT)
    instruction: Enqueue_first_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Enqueue.first_action(0, 3):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000003
      - next_table: 0
      - set Enqueue_first_tmp, Enqueue_first_table$salu.firsts
      - Enqueue_first_table$salu.firsts(Enqueue_set_first_reg_action, 0)
    default_action: SwitchIngress.Enqueue.first_action
  ternary_match Enqueue_inc_size_table 5:
    p4: { name: SwitchIngress.Enqueue.inc_size_table, size: 512 }
    hit: [  Enqueue_inc_tail_table ]
    miss:  Enqueue_inc_tail_table
    indirect: Enqueue_inc_size_table$tind
  ternary_indirect Enqueue_inc_size_table$tind:
    row: 2
    bus: 0
    format: { action: 0..0, meter_addr: 1..10 }
    stateful: Dequeue_dec_size_table$salu.sizes(meter_addr, $DEFAULT, $DEFAULT)
    instruction: Enqueue_inc_size_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Enqueue.inc_size(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000005
      - next_table: 0
      - Dequeue_dec_size_table$salu.sizes(Enqueue_inc_size_reg_action, 0)
    default_action: SwitchIngress.Enqueue.inc_size
  ternary_match Dequeue_left_table 1:
    p4: { name: SwitchIngress.Dequeue.left_table, size: 512 }
    hit: [  Dequeue_dec_size_table ]
    miss:  Dequeue_dec_size_table
    indirect: Dequeue_left_table$tind
  ternary_indirect Dequeue_left_table$tind:
    row: 1
    bus: 1
    format: { action: 0..0, meter_addr: 1..10 }
    action_bus: { 96..99 : Enqueue_left_table$salu.lefts(0..31) }
    stateful: Enqueue_left_table$salu.lefts(meter_addr, $DEFAULT, $DEFAULT)
    instruction: Dequeue_left_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Dequeue.read_left(0, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000008
      - next_table: 0
      - set Dequeue_left_tmp, Enqueue_left_table$salu.lefts
      - Enqueue_left_table$salu.lefts(Dequeue_read_left_reg_action, 1)
    default_action: SwitchIngress.Dequeue.read_left
  ternary_match Dequeue_dec_size_table 4:
    p4: { name: SwitchIngress.Dequeue.dec_size_table, size: 512 }
    hit: [  Dequeue_inc_head_table ]
    miss:  Dequeue_inc_head_table
    indirect: Dequeue_dec_size_table$tind
  stateful Dequeue_dec_size_table$salu.sizes:
    p4: { name: sizes, size: 3 }
    row: 15
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 15
    format: { lo: 32 }
    actions:
      Enqueue_inc_size_reg_action:
      - lss.u lo, lo, -3
      - add cmplo, lo, lo, 1
      Dequeue_dec_size_reg_action:
      - grt.u lo, lo
      - add cmplo, lo, lo, 4294967295
      - output mem_lo
  ternary_indirect Dequeue_dec_size_table$tind:
    row: 0
    bus: 0
    format: { action: 0..0, meter_addr: 1..10 }
    action_bus: { 112..115 : Dequeue_dec_size_table$salu.sizes(0..31) }
    stateful: Dequeue_dec_size_table$salu.sizes(meter_addr, $DEFAULT, $DEFAULT)
    instruction: Dequeue_dec_size_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Dequeue.dec_size(0, 5):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000009
      - next_table: 0
      - set Dequeue_size_tmp, Dequeue_dec_size_table$salu.sizes
      - Dequeue_dec_size_table$salu.sizes(Dequeue_dec_size_reg_action, 1)
    default_action: SwitchIngress.Dequeue.dec_size
stage 1 ingress:
  dependency: match
  ternary_match Enqueue_inc_tail_table 0:
    p4: { name: SwitchIngress.Enqueue.inc_tail_table, size: 512 }
    hit: [  Enqueue_enqueue_table ]
    miss:  Enqueue_enqueue_table
    indirect: Enqueue_inc_tail_table$tind
  stateful Enqueue_inc_tail_table$salu.tails:
    p4: { name: tails, size: 3 }
    row: 15
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 15
    input_xbar:
      exact group 0: { 0: Enqueue_first_tmp }
      hash 0:
        0: Enqueue_first_tmp
      hash group 0:
        table: [0]
        seed: 0x0
    hash_bytemask: 1
    format: { lo: 32 }
    actions:
      Enqueue_inc_tail_reg_action:
      - equ lo, phv_lo(0..7)
      - geq.u hi, lo, -2
      - alu_a (cmplo | cmphi), lo, 0
      - add (!cmplo & !cmphi), lo, lo, 1
      - output alu_lo
  ternary_indirect Enqueue_inc_tail_table$tind:
    row: 0
    bus: 0
    format: { action: 0..0, meter_addr: 1..10 }
    action_bus: { 96..99 : Enqueue_inc_tail_table$salu.tails(0..31) }
    stateful: Enqueue_inc_tail_table$salu.tails(meter_addr, $DEFAULT, $DEFAULT)
    instruction: Enqueue_inc_tail_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Enqueue.inc_tail(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000004
      - next_table: 0
      - add Enqueue_tail_tmp, Enqueue_inc_tail_table$salu.tails, Enqueue_left_tmp
      - Enqueue_inc_tail_table$salu.tails(Enqueue_inc_tail_reg_action, 0)
    default_action: SwitchIngress.Enqueue.inc_tail
  ternary_match Dequeue_inc_head_table 1:
    p4: { name: SwitchIngress.Dequeue.inc_head_table, size: 512 }
    gateway:
      name: cond-2
      input_xbar:
        exact group 0: { 0: Dequeue_size_tmp }
      row: 0
      bus: 0
      unit: 0
      match: { 0: Dequeue_size_tmp(0..7), 8: Dequeue_size_tmp(8..15), 16: Dequeue_size_tmp(16..23), 24: Dequeue_size_tmp(24..31) }
      0x00000000:  END
      miss: run_table
      condition: 
        expression: "(Dequeue_size_tmp > 0)"
        true:  Dequeue_inc_head_table
        false:  END
    hit: [  Dequeue_dequeue_table ]
    miss:  Dequeue_dequeue_table
    indirect: Dequeue_inc_head_table$tind
  stateful Dequeue_inc_head_table$salu.heads:
    p4: { name: heads, size: 3 }
    row: 11
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 11
    format: { lo: 32 }
    actions:
      Dequeue_inc_head_reg_action:
      - add lo, lo, 1
      - output mem_lo
  ternary_indirect Dequeue_inc_head_table$tind:
    row: 0
    bus: 1
    format: { action: 0..0, meter_addr: 1..10, meter_pfe: 11..11, meter_type: 12..14 }
    action_bus: { 104..107 : Dequeue_inc_head_table$salu.heads(0..31) }
    stateful: Dequeue_inc_head_table$salu.heads(meter_addr, meter_pfe, meter_type)
    instruction: Dequeue_inc_head_table$tind(action, $DEFAULT)
    actions:
      SwitchIngress.Dequeue.inc_head(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000a
      - next_table: 0
      - add Dequeue_head_tmp, Dequeue_inc_head_table$salu.heads, Dequeue_left_tmp
      - Dequeue_inc_head_table$salu.heads(Dequeue_inc_head_reg_action, 1)
    default_action: SwitchIngress.Dequeue.inc_head
stage 2 ingress:
  dependency: match
  hash_action Enqueue_enqueue_table 1:
    p4: { name: SwitchIngress.Enqueue.enqueue_table, size: 512 }
    row: 0
    result_bus: 1
    hash_dist:
      1: { hash: 0, mask: 0x7fffff, shift: 5, expand: 7 }
    input_xbar:
      exact group 0: { 0: Enqueue_tail_tmp }
      hash 0:
        16..31: Enqueue_tail_tmp(0..15)
        39..45: Enqueue_tail_tmp(16..22)
      hash group 0:
        table: [0]
        seed: 0x0
    gateway:
      name: Enqueue_enqueue_table-gateway
      row: 0
      bus: 0
      unit: 1
      0x0:  END
      miss:  END
      condition: 
        expression: "true(always hit)"
        true:  END
        false:  END
    next: []
    stateful: Dequeue_dequeue_table$salu.ring_buffers(hash_dist 1, $DEFAULT, $DEFAULT)
    instruction: Enqueue_enqueue_table($DEFAULT, $DEFAULT)
    actions:
      SwitchIngress.Enqueue.enqueue_action(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000006
      - next_table: 0
      - Dequeue_dequeue_table$salu.ring_buffers(Enqueue_write_buffer_reg_action, $hash_dist)
    default_action: SwitchIngress.Enqueue.enqueue_action
  hash_action Dequeue_dequeue_table 0:
    p4: { name: SwitchIngress.Dequeue.dequeue_table, size: 512 }
    row: 0
    result_bus: 0
    hash_dist:
      0: { hash: 0, mask: 0x7fffff, shift: 5, expand: 0 }
    input_xbar:
      exact group 0: { 0: Dequeue_head_tmp }
      hash 0:
        0..15: Dequeue_head_tmp(0..15)
        32..38: Dequeue_head_tmp(16..22)
      hash group 0:
        table: [0]
        seed: 0x0
    gateway:
      name: Dequeue_dequeue_table-gateway
      row: 0
      bus: 0
      unit: 0
      0x0:  END
      miss:  END
      condition: 
        expression: "true(always hit)"
        true:  END
        false:  END
    next: []
    stateful: Dequeue_dequeue_table$salu.ring_buffers(hash_dist 0, $DEFAULT, $DEFAULT)
    instruction: Dequeue_dequeue_table($DEFAULT, $DEFAULT)
    actions:
      SwitchIngress.Dequeue.dequeue_action(0, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x2000000b
      - next_table: 0
      - Dequeue_dequeue_table$salu.ring_buffers(Dequeue_read_buffer_reg_action, $hash_dist)
    default_action: SwitchIngress.Dequeue.dequeue_action
  stateful Dequeue_dequeue_table$salu.ring_buffers:
    p4: { name: ring_buffers, size: 9 }
    row: 15
    logical_bus: S
    column: [ 0, 1 ]
    maprams: [ 0, 1 ]
    home_row: 15
    input_xbar:
      exact group 0: { 64: hdr.ipv4.dst_addr }
    data_bytemask: 15
    format: { lo: 32 }
    actions:
      Enqueue_write_buffer_reg_action:
      - alu_a lo, phv_lo
      Dequeue_read_buffer_reg_action:
      - output mem_lo


primitives: "opt_buffers.prim.json"
dynhash: "opt_buffers.dynhash.json"
